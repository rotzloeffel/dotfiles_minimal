#--| environment variables transfered from the parent environment at reattach. |--#
set -ga update-environment '\
DISPLAY DBUS_SESSION_BUS_ADDRESS \
SESSION_MANAGER PATH SSH_CONNECTION\
XDG_CONFIG_HOME XDG_CACHE_HOME XDG_DATA_HOME\
XDG_MENU_PREFIX XDG_RUNTIME_DIR XDG_SESSION_CLASS \
XDG_SESSION_DESKTOP XDG_SESSION_TYPE XDG_CURRENT_DESKTOP \
FZF_DEFAULT_OPTS FZF_DEFAULT_COMMAND TERM SSH_ASKPASS  SSH_AGENT_PID \
WINDOWID XAUTHORITY SSH_AUTH_SOCK SWAYSOCK WAYLAND_DISPLAY \
GDK_BACKEND QT_QPA_PLATFORM CLUTTER_BACKEND SDL_VIDEODRIVER'

#--| keys |--#

#--| remap prefix to control + a |--#
set -g prefix C-a
unbind C-b
bind C-a send-prefix

#--| clipboard |--#
set -g set-clipboard on

#--| reload tmux |--#
unbind i
bind i source-file "$HOME/.tmux.conf" \; display "tmux.conf reloaded"

#--| popups |--#
bind M-n display-popup -h 95% -w 95% -E "nmon"

#--| prompt to open a man page on new pane |--#
bind-key m command-prompt -p '[ man page ]' "split-window -h 'exec man %%'"
bind-key M command-prompt -p '[ man page ]' "split-window 'exec man %%'"

#--| create new window |--#
bind-key c new-window -c "#{pane_current_path}"

#--| clear window name before renaming |--#
bind-key , rename-window "" \; command-prompt "rename-window '%%'"

#--| toggle status bar display with "b" |--#
bind-key b set -g status

#--| open top on new pane |--#
unbind-key t
bind-key t "split-window -h 'exec htop'"

#--| choose session |--#
bind-key s choose-session

#--| cycle through predefined layouts |--#
bind-key Space nextl

#--| focus last pane, without breaking the zoomed state of the window |--#
bind-key M-Space lastp -Z

#--| show information |--#
bind * displayp
bind ! show-messages

#--| quick pane cycling |--#
unbind ^A
bind ^A select-pane -t :.+
bind a last-window

#--| enter copy-mode with ESCAPE |--#
unbind [
bind Escape copy-mode

#--| vi-style prefix+p/P to paste |--#
unbind p
unbind P
bind p paste-buffer  -p
bind P choose-buffer -Z -F '#{buffer_sample}' "paste-buffer -p -b '%%'"

#--| clear screen and clear scrollback buffer |--#
bind-key C-l send-keys C-l \; run 'sleep 0.4' \; clear-history

#--| synchronize panes |--#
unbind @
bind @ setw synchronize-panes \; display-message "Toggle sync panes"

#--| kill all panes except the current one |--#
bind o killp -a

#--| kill all windows except the current one |--#
bind O killw -a

#--| more straight forward key bindings for splitting |--#
unbind %
unbind '"'
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"

#--| swap windows (move tabs) with Ctrl+Shift+arrows |--#
bind-key -n C-S-Left swap-window -t -1\; select-window -t -1
bind-key -n C-S-Right swap-window -t +1\; select-window -t +1

#--| switch panes without prefix key |--#
bind -n M-Down  select-pane -m \; select-pane -D \; swap-pane \; select-pane -M
bind -n M-Up    select-pane -m \; select-pane -U \; swap-pane \; select-pane -M
bind -n M-Left  select-pane -m \; select-pane -L \; swap-pane \; select-pane -M
bind -n M-Right select-pane -m \; select-pane -R \; swap-pane \; select-pane -M

#--| control+arrow keys without prefix key to switch windows |--#
bind -n C-Left  previous-window
bind -n C-Right next-window

#--| rename and create sessions |--#
bind C   command-prompt -p "new session name:"  "new-session -A -s '%%'"
bind ';' command-prompt -I "#{session_name}"    "rename-session '%%'"

#--| rotate windows |--#
bind -r r rotate-window -D \; selectp -t :.+
bind -r R rotate-window -U \; selectp -t :.-

#--| kill window|session|pane |--#
bind-key -n M-x kill-pane
bind-key x confirm-before -p "kill-pane #I? (y/n)"    kill-pane
bind-key X confirm-before -p "kill-window #W? (y/n)"  kill-window
bind-key q confirm-before -p "kill-session #S? (y/n)" kill-session
bind-key Q confirm-before -p "kill-server #S? (y/n)"  kill-server

#--| watch/unwatch for activity |--#
unbind A
bind A setw monitor-activity \; display-message "#{?monitor-activity,M,Not m}onitoring activity"

#--| set default shell |--#
set -g default-command "$SHELL"

#-- set lower buffer limit ( default=50 ) |--#
set -s buffer-limit 20

#--| set message style |--#
set-option -g message-style bg="#458588",fg="#1d2021"

#--| prevent holes in the sequence of indexes |--#
set -g renumber-windows on

#--| display status line messages and other on-screen indicators (or until a key is pressed) |--#
set -g display-time 1200

#--| update the status line every 5 second (instead of 15s by default) |--#
set -g status-interval 5

#--| position for the status line |--#
set -g status-position bottom

#--| display the indicators shown by the display-panes command for 2s |--#
set -g display-panes-time 2000

#--| hooks |--#

# re-source config on attach
set-hook -g client-attached "source-file \"$HOME/.tmux.conf\""

# welcome message on attach
set-hook -g client-attached "display-message \"welcome back\""

#--| set the active pane border style |--#
set -g pane-border-lines single
set -g pane-border-status off
set -g pane-border-style fg=#458588
set -g pane-active-border-style fg=#458588

#--| relax! |--#
set -sg escape-time 0
set -sg repeat-time 600

#--| enable mouse |--#
set -g mouse on

#--| mouse disable right click menu |--#
unbind -n MouseDown3Pane

#--| when scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5) |--#
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

#--| for vim |--#
setw -g xterm-keys on

#--| focus events |--#
set -g focus-events on

#--| less stretching to get to the first item |--#
set  -g base-index 1
setw -g pane-base-index 1

#--| history settings |--#
set -s history-file "$HOME/.cache/tmux_command_history"
set -g history-limit 50000

#--| vi-style in copy mode |--#
setw -g mode-keys vi

#--| vi-style in command prompt |--#
set -g status-keys vi

#--| pane resizing |--#
set -wg aggressive-resize on
set -wg window-size latest

#--| terminal emulator window title |--#
set -g set-titles on
set -g set-titles-string "#T"
set -g allow-passthrough on

#--| switch to the last active pane |--#
bind-key Tab last-pane

#--| terminal settings |--#
set -s  default-terminal   'screen-256color'
set -sa terminal-features  ',screen-256color:RGB'
set -sa terminal-features  ',tmux-256color:RGB'
set -sa terminal-features  ',xterm-256color:RGB'
set -sa terminal-features  ',xterm-kitty:RGB'
set -sa terminal-features  ',foot:RGB'
set -sa terminal-features  ',alacritty:RGB'

#--| set tmux terminal if supported |--#
if 'infocmp -x tmux-256color > /dev/null 2>&1' 'set -g default-terminal "tmux-256color"'

#--| don't keep windows around after they exit |--#
set -g remain-on-exit off

#--| don't jump back to the first search after going forward from the last search |--#
set -g wrap-search off

#--| scroll window to top before clearing so later history scrolling isn't truncated |--#
set -g scroll-on-clear on

#--| activity |--#
setw -g monitor-activity off
set  -g visual-activity  off
set  -g visual-bell      off
set  -g visual-silence   off
set  -g bell-action      none

#--| don't let terminal escape sequences rename my windows |--#
set-window-option -g allow-rename off

#--| smart pane switching with awareness of vim/fzf/vifm splits |--#
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"
is_vifm="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?vifm$'"

bind -n C-h run "($is_vim && tmux send-keys C-h) || \
                         ($is_vifm && tmux send-keys C-h) || \
                         tmux select-pane -L"

bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
                         ($is_vifm && tmux send-keys C-j) || \
                         ($is_fzf && tmux send-keys C-j) || \
                         tmux select-pane -D"

bind -n C-k run "($is_vim && tmux send-keys C-k) || \
                         ($is_vifm && tmux send-keys C-k) || \
                         ($is_fzf && tmux send-keys C-k)  || \
                         tmux select-pane -U"

bind -n C-l run  "($is_vim && tmux send-keys C-l) || \
                         ($is_vifm && tmux send-keys C-l) || \
                         tmux select-pane -R"

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
bind-key -n 'C-Space' if-shell "$is_vim" 'send-keys C-Space' 'select-pane -t:.+'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

#--| resize nvim and tmux panes with ALT + vi keys |--#
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind -n 'M-h' if-shell "$is_vim" 'send-keys M-h' 'resize-pane -L 1'
bind -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'resize-pane -D 1'
bind -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'resize-pane -U 1'
bind -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'resize-pane -R 1'

bind-key -T copy-mode-vi M-h resize-pane -L 1
bind-key -T copy-mode-vi M-j resize-pane -D 1
bind-key -T copy-mode-vi M-k resize-pane -U 1
bind-key -T copy-mode-vi M-l resize-pane -R 1

#--| theme |--#

# Copyright (c) 2016-present Sven Greb <development@svengreb.de>
# This source code is licensed under the MIT license found in the license file.

#+----------------+
#+ Plugin Support +
#+----------------+
#+--- tmux-prefix-highlight ---+
set -g @prefix_highlight_copy_mode_attr "fg=black,bg=brightcyan"

#+--------+
#+ Status +
#+--------+
#+--- Bars ---+
set -g status-left "#[fg=black,bg=blue,bold] #S "
set -g status-right "#{prefix_highlight}#[fg=white,bg=brightblack] ${NORD_TMUX_STATUS_DATE_FORMAT} #[fg=white,bg=brightblack,nobold,noitalics,nounderscore]|#[fg=white,bg=brightblack] ${NORD_TMUX_STATUS_TIME_FORMAT} #[fg=cyan,bg=brightblack,nobold,noitalics,nounderscore] #[fg=black,bg=cyan,bold] #H "

#+--- Windows ---+
set -g window-status-format " #[fg=white,bg=brightblack]#I #[fg=white,bg=brightblack]#W #F"
set -g window-status-current-format " #[fg=black,bg=cyan]#I#[fg=black,bg=cyan,nobold,noitalics,nounderscore] #[fg=black,bg=cyan]#W #F"
set -g window-status-separator ""
# Copyright (c) 2016-present Sven Greb <development@svengreb.de>
# This source code is licensed under the MIT license found in the license file.

#+----------------+
#+ Plugin Support +
#+----------------+
#+--- tmux-prefix-highlight ---+
set -g @prefix_highlight_fg black
set -g @prefix_highlight_bg brightcyan

#+---------+
#+ Options +
#+---------+
set -g status-interval 1
set -g status on

#+--------+
#+ Status +
#+--------+

#+--- Layout ---+
set -g status-justify left

#+--- Colors ---+
set -g status-style bg=black,fg=white

#+-------+
#+ Panes +
#+-------+
set -g pane-border-style bg=default,fg=brightblack
set -g pane-active-border-style bg=default,fg=blue
set -g display-panes-colour black
set -g display-panes-active-colour brightblack

#+------------+
#+ Clock Mode +
#+------------+
setw -g clock-mode-colour cyan

#+----------+
#+ Messages +
#+---------+
set -g message-style bg=brightblack,fg=cyan
set -g message-command-style bg=brightblack,fg=cyan

NORD_TMUX_STATUS_CONTENT_OPTION="@nord_tmux_show_status_content"
NORD_TMUX_STATUS_CONTENT_DATE_FORMAT="@nord_tmux_date_format"
NORD_TMUX_NO_PATCHED_FONT_OPTION="@nord_tmux_no_patched_font"

__cleanup() {
  unset -v NORD_TMUX_COLOR_THEME_FILE NORD_TMUX_VERSION
  unset -v NORD_TMUX_STATUS_CONTENT_FILE NORD_TMUX_STATUS_CONTENT_NO_PATCHED_FONT_FILE
  unset -v NORD_TMUX_STATUS_CONTENT_OPTION NORD_TMUX_NO_PATCHED_FONT_OPTION
  unset -v NORD_TMUX_STATUS_CONTENT_DATE_FORMAT
  unset -v _current_dir
  unset -f __load __cleanup
  tmux set-environment -gu NORD_TMUX_STATUS_TIME_FORMAT
  tmux set-environment -gu NORD_TMUX_STATUS_DATE_FORMAT
}

__load() {

  local status_content=$(tmux show-option -gqv "$NORD_TMUX_STATUS_CONTENT_OPTION")
  local no_patched_font=$(tmux show-option -gqv "$NORD_TMUX_NO_PATCHED_FONT_OPTION")
  local date_format=$(tmux show-option -gqv "$NORD_TMUX_STATUS_CONTENT_DATE_FORMAT")

  if [ "$(tmux show-option -gqv "clock-mode-style")" == '12' ]; then
    tmux set-environment -g NORD_TMUX_STATUS_TIME_FORMAT "%I:%M %p"
  else
    tmux set-environment -g NORD_TMUX_STATUS_TIME_FORMAT "%H:%M"
  fi

  if [ -z "$date_format" ]; then
    tmux set-environment -g NORD_TMUX_STATUS_DATE_FORMAT "%Y-%m-%d"
  else
    tmux set-environment -g NORD_TMUX_STATUS_DATE_FORMAT "$date_format"
  fi

}

__load
__cleanup
